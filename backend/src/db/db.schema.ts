import Database from "better-sqlite3";

// initialize an object
const db = new Database("data.db");

// Table creation
// user table
export const userTableCmd = `CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email TEXT NOT NULL UNIQUE,
    password TEXT NOT NULL
);`;

// profile table
export const profileTableCmd = `CREATE TABLE IF NOT EXISTS profiles (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    userId INTEGER NOT NULL,
    job TEXT NOT NULL,
    experience INTEGER NOT NULL,
    interviewType TEXT NOT NULL,
    FOREIGN KEY (userId) REFERENCES users (id)
);`;

export const skillTableCmd = `CREATE TABLE IF NOT EXISTS skills (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    skillName TEXT NOT NULL UNIQUE
);`;

// a skill can be on many profiles
// a profile can have many skills
// many-to-many relationship
// RDBMS tells us to create a different table to define many-to-many relationships
// composite primary key to enforce unique skills for a particular user no duplicacy
export const skillProfileTableCmd = `CREATE TABLE IF NOT EXISTS skill_profile(
    profileId INTEGER NOT NULL,
    skillId INTEGER NOT NULL,
    FOREIGN KEY (profileId) REFERENCES profiles (id),
    FOREIGN KEY (skillId) REFERENCES skills (id),
    PRIMARY KEY (profileId, skillId) ON CONFLICT IGNORE
);`;

// if user asks to review than their review needs to be stored in separate table
// reduces the cost of calling AI multiple times
// a practice session can have multiple questions
// a practice session should have single review
// a user can have multiple practice sessions
// each question from the qa table belongs to a single practice session

export const practiceSessionTableCmd = `CREATE TABLE IF NOT EXISTS practice_sessions(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    createdAt TEXT NOT NULL DEFAULT (datetime('now')),
    updatedAt TEXT NOT NULL DEFAULT (datetime('now'))
);`;

// when user starts new practice session
// question will be generated by AI
// answers will be written by user
// question can be skipped
// question can be Marked for review
// question can be submitted
// needs to have created_at
// user can have multiple question
// so one to many relationship
// each question and answer will come through post request
// if 9 questions than 9 API calls with answers stored in the db with that user id
//each question belongs to a particular practice session

export const qaTableCmd = `CREATE TABLE IF NOT EXISTS qa (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    userId INTEGER NOT NULL,
    practiceId INTEGER NOT NULL,
    question TEXT NOT NULL,
    answer TEXT,
    skip BOOLEAN DEFAULT FALSE,
    review BOOLEAN DEFAULT FALSE,
    submit BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (userId) REFERENCES users (id),
    FOREIGN KEY (practiceId) REFERENCES practice_sessions (id)
);`;

// a user can have many practice sessions
// a practice sessions can have multiple questions
// many to many relationship
export const userPracticeSessionTableCmd = `CREATE TABLE IF NOT EXISTS user_practice_sessions(
    userId INTEGER NOT NULL,
    practiceSessionId INTEGER NOT NULL,
    FOREIGN KEY (userId) REFERENCES users (id),
    FOREIGN KEY (practiceSessionId) REFERENCES practice_sessions (id),
    PRIMARY KEY (userId, practiceSessionId)
);`;

export default db;
